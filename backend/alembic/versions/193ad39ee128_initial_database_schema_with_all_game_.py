"""Initial database schema with all game models

Revision ID: 193ad39ee128
Revises:
Create Date: 2025-06-05 23:00:21.443625

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = "193ad39ee128"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "chat_channels",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("channel_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_chat_channels_name"), "chat_channels", ["name"], unique=False
    )
    op.create_table(
        "combat_sessions",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("status", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("turn_number", sa.Integer(), nullable=False),
        sa.Column(
            "current_turn_character_id", sqlmodel.sql.sqltypes.GUID(), nullable=True
        ),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("ended_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "guilds",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_guilds_name"), "guilds", ["name"], unique=True)
    op.create_table(
        "items",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "item_type",
            sa.Enum(
                "WEAPON",
                "ARMOR",
                "CONSUMABLE",
                "MATERIAL",
                "TOOL",
                "QUEST",
                "CURRENCY",
                name="itemtype",
            ),
            nullable=False,
        ),
        sa.Column(
            "rarity",
            sa.Enum(
                "COMMON", "UNCOMMON", "RARE", "EPIC", "LEGENDARY", name="itemrarity"
            ),
            nullable=False,
        ),
        sa.Column("base_value", sa.Integer(), nullable=False),
        sa.Column("max_stack_size", sa.Integer(), nullable=False),
        sa.Column("weight", sa.Float(), nullable=False),
        sa.Column(
            "equipment_slot",
            sa.Enum(
                "MAIN_HAND",
                "OFF_HAND",
                "HEAD",
                "CHEST",
                "LEGS",
                "FEET",
                "GLOVES",
                "RING_1",
                "RING_2",
                "NECK",
                "BACK",
                name="equipmentslot",
            ),
            nullable=True,
        ),
        sa.Column("required_level", sa.Integer(), nullable=False),
        sa.Column("required_skills", sa.JSON(), nullable=True),
        sa.Column("stats", sa.JSON(), nullable=True),
        sa.Column("effects", sa.JSON(), nullable=True),
        sa.Column("attributes", sa.JSON(), nullable=True),
        sa.Column("max_durability", sa.Integer(), nullable=True),
        sa.Column("repair_cost_multiplier", sa.Float(), nullable=False),
        sa.Column("is_tradeable", sa.Boolean(), nullable=False),
        sa.Column("is_droppable", sa.Boolean(), nullable=False),
        sa.Column("is_consumable", sa.Boolean(), nullable=False),
        sa.Column("is_unique", sa.Boolean(), nullable=False),
        sa.Column("crafting_recipe_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column(
            "crafting_skill_required", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column("icon_path", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("lore_text", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_items_item_type"), "items", ["item_type"], unique=False)
    op.create_index(op.f("ix_items_name"), "items", ["name"], unique=False)
    op.create_index(op.f("ix_items_rarity"), "items", ["rarity"], unique=False)
    op.create_table(
        "skills",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "category",
            sa.Enum("COMBAT", "GATHERING", "CRAFTING", "SOCIAL", name="skillcategory"),
            nullable=False,
        ),
        sa.Column("max_level", sa.Integer(), nullable=False),
        sa.Column("base_experience_required", sa.Integer(), nullable=False),
        sa.Column("experience_multiplier", sa.Float(), nullable=False),
        sa.Column("prerequisite_skills", sa.JSON(), nullable=True),
        sa.Column("min_character_level", sa.Integer(), nullable=False),
        sa.Column("stat_bonuses", sa.JSON(), nullable=True),
        sa.Column("abilities", sa.JSON(), nullable=True),
        sa.Column("sort_order", sa.Integer(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_skills_category"), "skills", ["category"], unique=False)
    op.create_index(op.f("ix_skills_name"), "skills", ["name"], unique=True)
    op.create_table(
        "users",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("username", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "hashed_password", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column(
            "role",
            sa.Enum("PLAYER", "MODERATOR", "ADMIN", "DEVELOPER", name="userrole"),
            nullable=False,
        ),
        sa.Column(
            "status",
            sa.Enum(
                "ACTIVE",
                "SUSPENDED",
                "BANNED",
                "PENDING_VERIFICATION",
                name="userstatus",
            ),
            nullable=False,
        ),
        sa.Column("is_verified", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("last_login", sa.DateTime(), nullable=True),
        sa.Column("max_characters", sa.Integer(), nullable=False),
        sa.Column("chat_settings", sa.JSON(), nullable=True),
        sa.Column("privacy_settings", sa.JSON(), nullable=True),
        sa.Column("login_attempts", sa.Integer(), nullable=False),
        sa.Column("locked_until", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_index(op.f("ix_users_username"), "users", ["username"], unique=True)
    op.create_table(
        "world_events",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("event_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("start_time", sa.DateTime(), nullable=False),
        sa.Column("end_time", sa.DateTime(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("event_data", sa.JSON(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_world_events_name"), "world_events", ["name"], unique=False
    )
    op.create_table(
        "zones",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("min_x", sa.Float(), nullable=False),
        sa.Column("max_x", sa.Float(), nullable=False),
        sa.Column("min_y", sa.Float(), nullable=False),
        sa.Column("max_y", sa.Float(), nullable=False),
        sa.Column("level_requirement", sa.Integer(), nullable=False),
        sa.Column("is_pvp_enabled", sa.Boolean(), nullable=False),
        sa.Column("is_safe_zone", sa.Boolean(), nullable=False),
        sa.Column("max_players", sa.Integer(), nullable=True),
        sa.Column("respawn_x", sa.Float(), nullable=False),
        sa.Column("respawn_y", sa.Float(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_zones_name"), "zones", ["name"], unique=True)
    op.create_table(
        "characters",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("user_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("level", sa.Integer(), nullable=False),
        sa.Column("experience", sa.Integer(), nullable=False),
        sa.Column("experience_to_next_level", sa.Integer(), nullable=False),
        sa.Column("health", sa.Integer(), nullable=False),
        sa.Column("max_health", sa.Integer(), nullable=False),
        sa.Column("mana", sa.Integer(), nullable=False),
        sa.Column("max_mana", sa.Integer(), nullable=False),
        sa.Column("gold", sa.Integer(), nullable=False),
        sa.Column("is_online", sa.Boolean(), nullable=False),
        sa.Column("is_in_combat", sa.Boolean(), nullable=False),
        sa.Column("is_dead", sa.Boolean(), nullable=False),
        sa.Column("current_zone_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("x_coordinate", sa.Float(), nullable=False),
        sa.Column("y_coordinate", sa.Float(), nullable=False),
        sa.Column("total_skill_points", sa.Integer(), nullable=False),
        sa.Column("available_skill_points", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("last_login", sa.DateTime(), nullable=True),
        sa.Column("last_logout", sa.DateTime(), nullable=True),
        sa.Column("settings", sa.JSON(), nullable=True),
        sa.ForeignKeyConstraint(
            ["current_zone_id"],
            ["zones.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_characters_current_zone_id"),
        "characters",
        ["current_zone_id"],
        unique=False,
    )
    op.create_index(op.f("ix_characters_name"), "characters", ["name"], unique=True)
    op.create_index(
        op.f("ix_characters_user_id"), "characters", ["user_id"], unique=False
    )
    op.create_table(
        "crafting_recipes",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("result_item_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("required_skill", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("required_skill_level", sa.Integer(), nullable=False),
        sa.Column("materials_required", sa.JSON(), nullable=True),
        sa.Column("crafting_time", sa.Integer(), nullable=False),
        sa.Column("success_rate", sa.Float(), nullable=False),
        sa.Column("experience_gained", sa.Integer(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["result_item_id"],
            ["items.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_crafting_recipes_name"), "crafting_recipes", ["name"], unique=False
    )
    op.create_index(
        op.f("ix_crafting_recipes_result_item_id"),
        "crafting_recipes",
        ["result_item_id"],
        unique=False,
    )
    op.create_table(
        "locations",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("zone_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("location_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("x_coordinate", sa.Float(), nullable=False),
        sa.Column("y_coordinate", sa.Float(), nullable=False),
        sa.Column("interaction_radius", sa.Float(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["zone_id"],
            ["zones.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_locations_name"), "locations", ["name"], unique=False)
    op.create_index(
        op.f("ix_locations_zone_id"), "locations", ["zone_id"], unique=False
    )
    op.create_table(
        "user_sessions",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("user_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("token_jti", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("device_info", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("ip_address", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("user_agent", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("expires_at", sa.DateTime(), nullable=False),
        sa.Column("last_activity", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_user_sessions_token_jti"), "user_sessions", ["token_jti"], unique=True
    )
    op.create_index(
        op.f("ix_user_sessions_user_id"), "user_sessions", ["user_id"], unique=False
    )
    op.create_table(
        "zone_instances",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("zone_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("instance_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("current_players", sa.Integer(), nullable=False),
        sa.Column("max_players", sa.Integer(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["zone_id"],
            ["zones.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_zone_instances_zone_id"), "zone_instances", ["zone_id"], unique=False
    )
    op.create_table(
        "auctions",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("seller_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("item_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("starting_price", sa.Integer(), nullable=False),
        sa.Column("current_bid", sa.Integer(), nullable=False),
        sa.Column("buyout_price", sa.Integer(), nullable=True),
        sa.Column("highest_bidder_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("status", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("expires_at", sa.DateTime(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["item_id"],
            ["items.id"],
        ),
        sa.ForeignKeyConstraint(
            ["seller_id"],
            ["characters.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_auctions_item_id"), "auctions", ["item_id"], unique=False)
    op.create_index(
        op.f("ix_auctions_seller_id"), "auctions", ["seller_id"], unique=False
    )
    op.create_table(
        "channel_memberships",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("channel_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("character_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("joined_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["channel_id"],
            ["chat_channels.id"],
        ),
        sa.ForeignKeyConstraint(
            ["character_id"],
            ["characters.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_channel_memberships_channel_id"),
        "channel_memberships",
        ["channel_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_channel_memberships_character_id"),
        "channel_memberships",
        ["character_id"],
        unique=False,
    )
    op.create_table(
        "character_locations",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("character_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("zone_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("x_coordinate", sa.Float(), nullable=False),
        sa.Column("y_coordinate", sa.Float(), nullable=False),
        sa.Column("movement_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("previous_x", sa.Float(), nullable=True),
        sa.Column("previous_y", sa.Float(), nullable=True),
        sa.Column("timestamp", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["character_id"],
            ["characters.id"],
        ),
        sa.ForeignKeyConstraint(
            ["zone_id"],
            ["zones.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_character_locations_character_id"),
        "character_locations",
        ["character_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_character_locations_zone_id"),
        "character_locations",
        ["zone_id"],
        unique=False,
    )
    op.create_table(
        "character_skills",
        sa.Column("character_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("skill_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("level", sa.Integer(), nullable=False),
        sa.Column("experience", sa.Integer(), nullable=False),
        sa.Column("experience_to_next_level", sa.Integer(), nullable=False),
        sa.Column("times_used", sa.Integer(), nullable=False),
        sa.Column("last_used", sa.DateTime(), nullable=True),
        sa.Column("last_trained", sa.DateTime(), nullable=True),
        sa.Column("mastery_bonus", sa.Float(), nullable=False),
        sa.Column("is_favorite", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["character_id"],
            ["characters.id"],
        ),
        sa.ForeignKeyConstraint(
            ["skill_id"],
            ["skills.id"],
        ),
        sa.PrimaryKeyConstraint("character_id", "skill_id"),
    )
    op.create_table(
        "combat_actions",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("combat_session_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("character_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("action_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("target_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("turn_number", sa.Integer(), nullable=False),
        sa.Column("action_data", sa.JSON(), nullable=True),
        sa.Column("result_data", sa.JSON(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["character_id"],
            ["characters.id"],
        ),
        sa.ForeignKeyConstraint(
            ["combat_session_id"],
            ["combat_sessions.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_combat_actions_character_id"),
        "combat_actions",
        ["character_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_combat_actions_combat_session_id"),
        "combat_actions",
        ["combat_session_id"],
        unique=False,
    )
    op.create_table(
        "combat_participants",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("combat_session_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("character_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("is_alive", sa.Boolean(), nullable=False),
        sa.Column("initiative", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["character_id"],
            ["characters.id"],
        ),
        sa.ForeignKeyConstraint(
            ["combat_session_id"],
            ["combat_sessions.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_combat_participants_character_id"),
        "combat_participants",
        ["character_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_combat_participants_combat_session_id"),
        "combat_participants",
        ["combat_session_id"],
        unique=False,
    )
    op.create_table(
        "combat_results",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("combat_session_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("winner_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("experience_awarded", sa.Integer(), nullable=False),
        sa.Column("gold_awarded", sa.Integer(), nullable=False),
        sa.Column("items_awarded", sa.JSON(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["combat_session_id"],
            ["combat_sessions.id"],
        ),
        sa.ForeignKeyConstraint(
            ["winner_id"],
            ["characters.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_combat_results_combat_session_id"),
        "combat_results",
        ["combat_session_id"],
        unique=False,
    )
    op.create_table(
        "friendships",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("character_1_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("character_2_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("status", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["character_1_id"],
            ["characters.id"],
        ),
        sa.ForeignKeyConstraint(
            ["character_2_id"],
            ["characters.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_friendships_character_1_id"),
        "friendships",
        ["character_1_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_friendships_character_2_id"),
        "friendships",
        ["character_2_id"],
        unique=False,
    )
    op.create_table(
        "guild_members",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("guild_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("character_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column(
            "role",
            sa.Enum("MEMBER", "OFFICER", "LEADER", name="guildrole"),
            nullable=False,
        ),
        sa.Column("joined_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["character_id"],
            ["characters.id"],
        ),
        sa.ForeignKeyConstraint(
            ["guild_id"],
            ["guilds.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_guild_members_character_id"),
        "guild_members",
        ["character_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_guild_members_guild_id"), "guild_members", ["guild_id"], unique=False
    )
    op.create_table(
        "inventory_slots",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("character_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("item_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("slot_number", sa.Integer(), nullable=False),
        sa.Column("quantity", sa.Integer(), nullable=False),
        sa.Column("durability", sa.Integer(), nullable=True),
        sa.Column("condition", sa.Float(), nullable=False),
        sa.Column("is_equipped", sa.Boolean(), nullable=False),
        sa.Column(
            "equipped_slot",
            sa.Enum(
                "MAIN_HAND",
                "OFF_HAND",
                "HEAD",
                "CHEST",
                "LEGS",
                "FEET",
                "GLOVES",
                "RING_1",
                "RING_2",
                "NECK",
                "BACK",
                name="equipmentslot",
            ),
            nullable=True,
        ),
        sa.Column("custom_name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("enchantments", sa.JSON(), nullable=True),
        sa.Column("is_bound", sa.Boolean(), nullable=False),
        sa.Column("bound_to_character", sa.Boolean(), nullable=False),
        sa.Column("acquired_at", sa.DateTime(), nullable=False),
        sa.Column("last_used", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["character_id"],
            ["characters.id"],
        ),
        sa.ForeignKeyConstraint(
            ["item_id"],
            ["items.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_inventory_slots_character_id"),
        "inventory_slots",
        ["character_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_inventory_slots_item_id"), "inventory_slots", ["item_id"], unique=False
    )
    op.create_table(
        "messages",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("channel_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("sender_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("content", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["channel_id"],
            ["chat_channels.id"],
        ),
        sa.ForeignKeyConstraint(
            ["sender_id"],
            ["characters.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_messages_channel_id"), "messages", ["channel_id"], unique=False
    )
    op.create_index(
        op.f("ix_messages_sender_id"), "messages", ["sender_id"], unique=False
    )
    op.create_table(
        "npc_merchants",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("location_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("merchant_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("inventory_data", sa.JSON(), nullable=True),
        sa.Column("pricing_data", sa.JSON(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["location_id"],
            ["locations.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_npc_merchants_location_id"),
        "npc_merchants",
        ["location_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_npc_merchants_name"), "npc_merchants", ["name"], unique=False
    )
    op.create_table(
        "parties",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("leader_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["leader_id"],
            ["characters.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "trades",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("trader_1_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("trader_2_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("status", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("trade_data", sa.JSON(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("completed_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["trader_1_id"],
            ["characters.id"],
        ),
        sa.ForeignKeyConstraint(
            ["trader_2_id"],
            ["characters.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_trades_trader_1_id"), "trades", ["trader_1_id"], unique=False
    )
    op.create_index(
        op.f("ix_trades_trader_2_id"), "trades", ["trader_2_id"], unique=False
    )
    op.create_table(
        "message_history",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("message_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("archived_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["message_id"],
            ["messages.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_message_history_message_id"),
        "message_history",
        ["message_id"],
        unique=False,
    )
    op.create_table(
        "party_members",
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("party_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("character_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("joined_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["character_id"],
            ["characters.id"],
        ),
        sa.ForeignKeyConstraint(
            ["party_id"],
            ["parties.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_party_members_character_id"),
        "party_members",
        ["character_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_party_members_party_id"), "party_members", ["party_id"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_party_members_party_id"), table_name="party_members")
    op.drop_index(op.f("ix_party_members_character_id"), table_name="party_members")
    op.drop_table("party_members")
    op.drop_index(op.f("ix_message_history_message_id"), table_name="message_history")
    op.drop_table("message_history")
    op.drop_index(op.f("ix_trades_trader_2_id"), table_name="trades")
    op.drop_index(op.f("ix_trades_trader_1_id"), table_name="trades")
    op.drop_table("trades")
    op.drop_table("parties")
    op.drop_index(op.f("ix_npc_merchants_name"), table_name="npc_merchants")
    op.drop_index(op.f("ix_npc_merchants_location_id"), table_name="npc_merchants")
    op.drop_table("npc_merchants")
    op.drop_index(op.f("ix_messages_sender_id"), table_name="messages")
    op.drop_index(op.f("ix_messages_channel_id"), table_name="messages")
    op.drop_table("messages")
    op.drop_index(op.f("ix_inventory_slots_item_id"), table_name="inventory_slots")
    op.drop_index(op.f("ix_inventory_slots_character_id"), table_name="inventory_slots")
    op.drop_table("inventory_slots")
    op.drop_index(op.f("ix_guild_members_guild_id"), table_name="guild_members")
    op.drop_index(op.f("ix_guild_members_character_id"), table_name="guild_members")
    op.drop_table("guild_members")
    op.drop_index(op.f("ix_friendships_character_2_id"), table_name="friendships")
    op.drop_index(op.f("ix_friendships_character_1_id"), table_name="friendships")
    op.drop_table("friendships")
    op.drop_index(
        op.f("ix_combat_results_combat_session_id"), table_name="combat_results"
    )
    op.drop_table("combat_results")
    op.drop_index(
        op.f("ix_combat_participants_combat_session_id"),
        table_name="combat_participants",
    )
    op.drop_index(
        op.f("ix_combat_participants_character_id"), table_name="combat_participants"
    )
    op.drop_table("combat_participants")
    op.drop_index(
        op.f("ix_combat_actions_combat_session_id"), table_name="combat_actions"
    )
    op.drop_index(op.f("ix_combat_actions_character_id"), table_name="combat_actions")
    op.drop_table("combat_actions")
    op.drop_table("character_skills")
    op.drop_index(
        op.f("ix_character_locations_zone_id"), table_name="character_locations"
    )
    op.drop_index(
        op.f("ix_character_locations_character_id"), table_name="character_locations"
    )
    op.drop_table("character_locations")
    op.drop_index(
        op.f("ix_channel_memberships_character_id"), table_name="channel_memberships"
    )
    op.drop_index(
        op.f("ix_channel_memberships_channel_id"), table_name="channel_memberships"
    )
    op.drop_table("channel_memberships")
    op.drop_index(op.f("ix_auctions_seller_id"), table_name="auctions")
    op.drop_index(op.f("ix_auctions_item_id"), table_name="auctions")
    op.drop_table("auctions")
    op.drop_index(op.f("ix_zone_instances_zone_id"), table_name="zone_instances")
    op.drop_table("zone_instances")
    op.drop_index(op.f("ix_user_sessions_user_id"), table_name="user_sessions")
    op.drop_index(op.f("ix_user_sessions_token_jti"), table_name="user_sessions")
    op.drop_table("user_sessions")
    op.drop_index(op.f("ix_locations_zone_id"), table_name="locations")
    op.drop_index(op.f("ix_locations_name"), table_name="locations")
    op.drop_table("locations")
    op.drop_index(
        op.f("ix_crafting_recipes_result_item_id"), table_name="crafting_recipes"
    )
    op.drop_index(op.f("ix_crafting_recipes_name"), table_name="crafting_recipes")
    op.drop_table("crafting_recipes")
    op.drop_index(op.f("ix_characters_user_id"), table_name="characters")
    op.drop_index(op.f("ix_characters_name"), table_name="characters")
    op.drop_index(op.f("ix_characters_current_zone_id"), table_name="characters")
    op.drop_table("characters")
    op.drop_index(op.f("ix_zones_name"), table_name="zones")
    op.drop_table("zones")
    op.drop_index(op.f("ix_world_events_name"), table_name="world_events")
    op.drop_table("world_events")
    op.drop_index(op.f("ix_users_username"), table_name="users")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_table("users")
    op.drop_index(op.f("ix_skills_name"), table_name="skills")
    op.drop_index(op.f("ix_skills_category"), table_name="skills")
    op.drop_table("skills")
    op.drop_index(op.f("ix_items_rarity"), table_name="items")
    op.drop_index(op.f("ix_items_name"), table_name="items")
    op.drop_index(op.f("ix_items_item_type"), table_name="items")
    op.drop_table("items")
    op.drop_index(op.f("ix_guilds_name"), table_name="guilds")
    op.drop_table("guilds")
    op.drop_table("combat_sessions")
    op.drop_index(op.f("ix_chat_channels_name"), table_name="chat_channels")
    op.drop_table("chat_channels")
    # ### end Alembic commands ###
